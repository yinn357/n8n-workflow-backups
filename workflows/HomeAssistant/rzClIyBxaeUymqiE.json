{
  "active": false,
  "connections": {
    "处理日期时间": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "获取HA日志": {
      "main": [
        [
          {
            "node": "必要字段存在",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "按小时分组处理统计",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "按小时分组处理统计": {
      "main": [
        [
          {
            "node": "转换为图表数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "转换为图表数据": {
      "main": [
        [
          {
            "node": "生成图标",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "必要字段存在": {
      "main": [
        [
          {
            "node": "处理日期时间",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "获取HA日志",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-10T02:57:48.000Z",
  "id": "rzClIyBxaeUymqiE",
  "isArchived": false,
  "meta": null,
  "name": "sub-HA日志-传感器图表",
  "nodes": [
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -320,
        400
      ],
      "id": "23a59a41-7a4f-47b5-89e7-bd72fcd08050",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "jsCode": "return $input.all().map((item)=>{\n  let data = item.json;\n  const dt = DateTime.fromISO(data.when, { zone: 'utc' })\n              .setZone('Asia/Shanghai'); // 设置目标时区\n  data.dateTime = dt.toString();\n  // 日\n  const day = dt.day;\n  // 小时\n  const hour = dt.hour;\n  // 日-小时\n  data.label = `${day}-${hour.toString().padStart(2,'0')}:00`\n  \n  return {json: {...data}};\n})"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        400
      ],
      "id": "d42211bc-3ed3-4591-9d0e-38c614210e78",
      "name": "处理日期时间"
    },
    {
      "parameters": {
        "resource": "log",
        "operation": "getLogbookEntries",
        "additionalFields": {
          "endTime": "={{ (() => {\n  const d = new Date($now);\n  const pad = n => n.toString().padStart(2, '0');\n  return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;\n})() }}",
          "startTime": "={{ new Date(new Date($now).getTime() - 24 * 60 * 60 * 1000).toISOString().split('T')[0] + ' 00:00:00' }}"
        }
      },
      "type": "n8n-nodes-base.homeAssistant",
      "typeVersion": 1,
      "position": [
        -96,
        400
      ],
      "id": "bd8e3734-faed-436d-8eb9-a518cfd5e055",
      "name": "获取HA日志",
      "credentials": {
        "homeAssistantApi": {
          "id": "6EZ5GmsOjYCFa9Qg",
          "name": "Home Assistant account"
        }
      }
    },
    {
      "parameters": {
        "mode": "expression",
        "numberOutputs": 3,
        "output": "={{\n$json.entity_id.startsWith('sensor.') && $json.name.endsWith('有人无人状态') && ['有人','SomeOne'].includes($json.state)?0:\n$json.entity_id.startsWith('light.')?1:2\n}}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        576,
        384
      ],
      "id": "9897c294-b171-47e5-bd03-4830373c1ac7",
      "name": "Switch",
      "notes": "0:name like '%有人无人状态' // 有无人\n1:entity_id like 'light.%'  // 灯"
    },
    {
      "parameters": {
        "content": "## Switch\n- 0: 存在传感器 **有人**\n- 1: 灯光 **开启**",
        "height": 320,
        "width": 288
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        256,
        240
      ],
      "typeVersion": 1,
      "id": "ad0f32b3-3164-4428-8f62-63397b22bc94",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "jsCode": "// 获取所有数据\nconst allData = $input.all();\n\n// 获取最小/最大日期\nconst { minDate, maxDate } = allData.reduce((acc, curr) => {\n  const currentDate = new Date(curr.json.when);\n  if (!acc.minDate || currentDate < acc.minDate) {\n    acc.minDate = currentDate;\n  }\n  if (!acc.maxDate || currentDate > acc.maxDate) {\n    acc.maxDate = currentDate;\n  }\n  return acc;\n}, { minDate: null, maxDate: null });\n\n// 按 10 分钟统计\nconst countsPer10Min = {};\n\n// 设置起始时间向下对齐到最近的 10 分钟\nlet current = new Date(minDate);\nconst m = current.getMinutes();\n// 计算对齐后的分钟数：向下取整到 10 的倍数\nconst alignedMin = Math.floor(m / 10) * 10;\ncurrent.setMinutes(alignedMin, 0, 0);\n\n// 循环，每次加 10 分钟\nconst TEN_MIN_MS = 10 * 60 * 1000;\nwhile (current <= maxDate) {\n  const next = new Date(current.getTime() + TEN_MIN_MS);\n\n  // 构造 10 分钟区间 key，例如 \"2025-07-25 14:20\"\n  const Y = current.getFullYear();\n  const M = String(current.getMonth() + 1).padStart(2, '0');\n  const D = String(current.getDate()).padStart(2, '0');\n  const H = String(current.getHours()).padStart(2, '0');\n  const mm = String(current.getMinutes()).padStart(2, '0');\n  const tenMinKey = `${Y}-${M}-${D} ${H}:${mm}`;\n\n  // 统计当前 10 分钟区间内的记录数量\n  const count = allData.filter(item => {\n    const date = new Date(item.json.when);\n    return date >= current && date < next;\n  }).length;\n\n  countsPer10Min[tenMinKey] = count;\n\n  // 移动到下一个 10 分钟\n  current = next;\n}\n\n// 返回格式化结果\nreturn Object.entries(countsPer10Min).map(([interval, count]) => {\n  return { json: { hour:interval, count } };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        400
      ],
      "id": "1578062e-9e7e-4f2d-86a5-f26c8f9f63ff",
      "name": "按小时分组处理统计"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://quickchart.io/chart/create",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1248,
        400
      ],
      "id": "9d318d2a-727c-46fc-a14f-9fc299438d65",
      "name": "生成图标"
    },
    {
      "parameters": {
        "jsCode": "const labels = [];\nconst data = [];\n$input.all().forEach(item=>{\n  let label = item.json.hour.split(' ')[1];\n  labels.push(label);\n  data.push(item.json.count);\n})\nlet title = $input.all().at(0).json.hour +' ~ '+$input.all().at($input.all().length-1).json.hour +' 活动情况'\nreturn [{json:{\n    \"width\": 600,\n    \"height\": 300,\n    // \"format\": \"base64\",\n    \"chart\":{\n    \"type\": \"line\",\n    \"data\": {\n      \"labels\": labels,\n      \"datasets\": [\n        {\n          \"type\": \"line\",\n          \"label\": title,\n          \"lineTension\": 0.4,\n          \"borderWidth\": 1,\n          \"pointRadius\": 0,\n          \"borderColor\": \"rgb(54, 162, 235)\",\n          \"fill\": false,\n          \"data\": data\n        }\n      ]\n    }\n  }\n}}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        400
      ],
      "id": "f33c77a7-2a79-440d-9a79-ecd72d0cdbc1",
      "name": "转换为图表数据"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "506c2735-361e-4e91-9ca4-c3250e9fd354",
              "leftValue": "={{ $json.entity_id }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "77f96273-9991-4121-9dff-ceec10ce4253",
              "leftValue": "={{ $json.name }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            },
            {
              "id": "0ee9e30b-3328-4d81-9525-c53aca5cbf6a",
              "leftValue": "={{ $json.state }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        128,
        400
      ],
      "id": "551337fe-e2b7-4cf2-a818-d210427ab2b8",
      "name": "必要字段存在"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "updatedAt": "2025-09-10T02:57:48.025Z",
      "createdAt": "2025-09-10T02:57:48.025Z",
      "role": "workflow:owner",
      "workflowId": "rzClIyBxaeUymqiE",
      "projectId": "BeX3bor8ts20lbDK"
    }
  ],
  "staticData": null,
  "tags": [
    {
      "updatedAt": "2025-09-10T02:08:30.393Z",
      "createdAt": "2025-06-26T06:14:33.448Z",
      "id": "FHV017iDd8qf8jAL",
      "name": "HomeAssistant"
    },
    {
      "updatedAt": "2025-07-11T03:55:43.484Z",
      "createdAt": "2025-07-11T02:54:27.831Z",
      "id": "JqrpOsXNCY5fMnlD",
      "name": "Common"
    }
  ],
  "triggerCount": 0,
  "updatedAt": "2025-09-10T02:59:29.000Z",
  "versionId": "acb6c13e-fa16-4897-aed1-c5166effd583"
}